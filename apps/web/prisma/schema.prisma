// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  DOCTOR
  NURSE
  PATIENT
  EMPLOYEE
}

// Define the Gender enum
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Define the AppointmentType enum
enum AppointmentType {
  ROUTINE_CHECKUP
  CONSULTATION
  SURGERY
  EMERGENCY_VISIT
  // Add more appointment types as needed
}

// Define the PriorityLevel enum
enum PriorityLevel {
  HIGH
  MEDIUM
  LOW
  // Add more priority levels as needed
}

// Define the PaymentStatus enum
enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
  // Add more payment status options as needed
}

// Define the Disposition enum
enum Disposition {
  ADMITTED
  DISCHARGED
  REFERRED
  // Add more disposition options as needed
}

// Define the TestType enum
enum TestType {
  BLOOD_TEST
  URINE_TEST
  X_RAY
  MRI
  CT_SCAN
  ULTRASOUND
  ECG
  EEG
  ENDOSCOPY
  COLONOSCOPY
  BIOPSY
  ALLERGY_TEST
  PAP_SMEAR
  DNA_TEST
  STOOL_TEST
  SWAB_TEST
  LIVER_FUNCTION_TEST
  KIDNEY_FUNCTION_TEST
  THYROID_FUNCTION_TEST
  HORMONE_TEST
  CARDIAC_ENZYME_TEST
  HIV_TEST
  HEPATITIS_TEST
  STI_TEST
  PREGNANCY_TEST
  GLUCOSE_TOLERANCE_TEST
  INFLAMMATION_MARKER_TEST
  CANCER_MARKER_TEST
  GENETIC_TEST
  SEROLOGY_TEST
  MICROBIOLOGY_TEST
  CHEMISTRY_PANEL
  COAGULATION_TEST
  HEMATOLOGY_TEST
  IMMUNOLOGY_TEST
  DRUG_SCREENING
  TOXICOLOGY_TEST
  METABOLIC_PANEL
  THROMBOPHILIA_TEST
  VITAMIN_TEST
  PARASITOLOGY_TEST
  FUNGAL_TEST
  TUMOR_MARKER_TEST
  RESPIRATORY_FUNCTION_TEST
  AUDIOMETRY_TEST
  VISION_TEST
  DXA_SCAN
  ALLERGY_PATCH_TEST
  BREATH_TEST
  CYSTIC_FIBROSIS_TEST
  GENETIC_COUNSELING
  SKIN_TEST
  BIOMETRIC_SCREENING
  SLEEP_STUDY
  CARDIAC_STRESS_TEST
  LUNG_FUNCTION_TEST
  AMNIOTIC_FLUID_TEST
  ABDOMINAL_ULTRASOUND
  FETAL_MONITORING
  GASTROINTESTINAL_PANEL
  HISTOPATHOLOGY
  RENAL_FUNCTION_TEST
  REPRODUCTIVE_HORMONE_TEST
  THYROID_ANTIBODY_TEST
  URINE_DRUG_TEST
  VIRAL_LOAD_TEST
  VDRL_TEST
  WESTERN_BLOT
  TROPOHONIN_TEST
  BACTERIAL_CULTURE
  FUNGAL_CULTURE
  VIRAL_CULTURE
  SEROTONIN_LEVEL_TEST
  THYROID_SCAN
  PANCREATIC_FUNCTION_TEST
  SPUTUM_CULTURE
  MANTOUX_TEST
  HISTOCOMPATIBILITY_TEST
  LIPID_PROFILE
  BONE_SCAN
  KARYOTYPE_TEST
  TSH_TEST
  T3_TEST
  T4_TEST
  CREATININE_CLEARANCE_TEST
  CYSTOSCOPY
  GASTRIC_EMPTYING_TEST
  GASTROSCOPY
  PULMONARY_FUNCTION_TEST
  SWEAT_TEST
  FLOW_CYTOMETRY
  IMMUNOHISTOCHEMISTRY
  ELECTROPHORESIS
  FLOW_CITOMETRY
  VENOUS_DOPPLER
  ARTERIAL_DOPPLER
  TISSUE_TYPING
  MRI_ANGIOGRAPHY
  CT_ANGIOGRAPHY
  ECHO_TEST
  PLETHYSMOGRAPHY
  VAGINAL_CULTURE
  PROSTATE_SPECIFIC_ANTIGEN_TEST
  CERVICAL_CULTURE
  SEMEN_ANALYSIS
  SPERM_TEST
  OVARIAN_RESERVE_TEST
  BLOOD_GAS_ANALYSIS
  PROTHROMBIN_TIME_TEST
  INTERNATIONAL_NORMALIZED_RATIO_TEST
  ACTIVATED_PARTIAL_THROMBOPLASTIN_TIME_TEST
  D_DIMER_TEST
  CYTOTOXICITY_TEST
  GENE_EXPRESSION_TEST
  MYOCARDIAL_PERFUSION_SCAN
  CARDIAC_CATHETERIZATION
  ESOPHAGEAL_MANOMETRY
  AMNIOTIC_FLUID_INDEX
  FETAL_BIOPHYSICAL_PROFILE
  TWIN_TO_TWIN_TRANSFUSION_SYNDROME_TEST
  NASOPHARYNGEAL_SWAB_TEST
  TROPONIN_TEST
  PRENATAL_SCREENING
  RENAL_ULTRASOUND
  RENAL_ANGIOGRAPHY
  CHROMOSONAL_MICROARRAY
  COMPREHENSIVE_METABOLIC_PANEL
  RENAL_ARTERIOGRAM
  PROSTATE_ULTRASOUND
  OVARIAN_ULTRASOUND
  DOPPLER_ULTRASOUND
  TRANSVAGINAL_ULTRASOUND
  FETAL_ECHOCARDIOGRAPHY
  SLEEP_APNEA_TEST
  LIPID_PANEL
  RHEUMATOID_FACTOR_TEST
  ANTINUCLEAR_ANTIBODY_TEST
  GLYCOSYLATED_HEMOGLOBIN_TEST
  BLOOD_CULTURE
  URINE_CULTURE
  CEREBROSPINAL_FLUID_ANALYSIS
  SPUTUM_ANALYSIS
  NASAL_SWAB_TEST
  TRACHEAL_ASPIRATE_TEST
  GENE_MUTATION_ANALYSIS
  HISTOCHEMISTRY
  IMMUNOFLUORESCENCE
  IMMUNOASSAY
  MICROARRAY_ANALYSIS
  NUCLEIC_ACID_AMPLIFICATION_TEST
  POLYMERASE_CHAIN_REACTION_TEST
  WESTERN_BLOT_TEST
  SOUTHERN_BLOT_TEST
  NORTHERN_BLOT_TEST
  RADIOLABELLING
  RADIOIMMUNOASSAY
  ISOTOPE_DILUTION
  RADIOTHERAPY
  RADIOFREQUENCY_ABLATION
  GAMMA_KNIFE_SURGERY
  ION_BEAM_THERAPY
  PROTON_THERAPY
  BRACHYTHERAPY
  ENDOVASCULAR_SURGERY
  LAPAROSCOPIC_SURGERY
  ROBOTIC_SURGERY
}

// Define the SurgeryType enum
enum SurgeryType {
  APPENDECTOMY
  KNEE_REPLACEMENT
  HIP_REPLACEMENT
  CATARACT_SURGERY
  LASIK_EYE_SURGERY
  CORONARY_ARTERY_BYPASS
  HEART_VALVE_REPLACEMENT
  ANGIOPLASTY
  PACEMAKER_IMPLANTATION
  HERNIA_REPAIR
  GALLBLADDER_REMOVAL
  COLON_RESECTION
  GASTRIC_BYPASS
  LIVER_TRANSPLANT
  KIDNEY_TRANSPLANT
  PANCREAS_TRANSPLANT
  LUNG_TRANSPLANT
  BONE_MARROW_TRANSPLANT
  BRAIN_SURGERY
  SPINAL_FUSION
  CRANIOTOMY
  TONSILLECTOMY
  ADENOIDECTOMY
  THYROIDECTOMY
  MASTECTOMY
  HYSTERECTOMY
  APPENDIX_REMOVAL
  PROSTATECTOMY
  CHOLECYSTECTOMY
  NEPHRECTOMY
  VASECTOMY
  TUBAL_LIGATION
  VAGINOPLASTY
  PENILE_IMPLANT
  BREAST_RECONSTRUCTION
  GYNECOMASTIA_SURGERY
  RHINOPLASTY
  BLEPHAROPLASTY
  LIPOSUCTION
  TUMMY_TUCK
  BARIATRIC_SURGERY
  FACELIFT
  BUTTOCK_ENHANCEMENT
  HAIR_TRANSPLANT
  SCAR_REVISION
  VARICOSE_VEIN_SURGERY
  TATTOO_REMOVAL
  SKIN_GRAFT
  BONE_GRAFT
  JOINT_REPLACEMENT
  LIGAMENT_REPAIR
  CARTILAGE_REPAIR
  ARTHROSCOPY
  ORTHOPEDIC_SURGERY
  PLASTIC_SURGERY
  COSMETIC_SURGERY
  RECONSTRUCTIVE_SURGERY
  MINIMALLY_INVASIVE_SURGERY
  ROBOTIC_SURGERY
}


// Define the LogType enum
enum LogType {
  LOGIN
  ACCESS_DENIED
  ERROR
  INFORMATION
  // Add more log types as needed
}

// Define the Role enum
enum powerLevel {
  ADMINISTRATOR
  EMPLOYEE
  DOCTOR
  USER
  // Add more roles as needed
}

// Define the BedStatus enum
enum BedStatus {
  OCCUPIED
  AVAILABLE
  RESERVED
  OUT_OF_SERVICE
  // Add more bed statuses as needed
}

// Define the ForumPostCategory enum
enum ForumPostCategory {
  GENERAL_DISCUSSION
  MEDICAL_ADVICE
  STAFF_ANNOUNCEMENTS
  // Add more forum post categories as needed
}

// Define the User model
model User {
  id            Int            @id @default(autoincrement())
  salt          String
  email         String         @unique
  civilID       String         @unique
  passwordHash  String
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  gender        Gender
  contactNumber String
  deleted       Boolean        @default(false) 
  userType      UserType // You might want to use an enum for UserType
  powerLevel    powerLevel
  Doctor        Doctor[]
  Nurse         Nurse[]
  Patient       Patient[]
  Employee      Employee[]
  Logs          Logs[]
  ForumPosts    ForumPosts[]
  ForumReplies  ForumReplies[]
  ChatMessage   ChatMessage[]
  authToken     String?   // Field for storing authentication token
  lastLoginAt   DateTime? // Field for storing last login timestamp
}

// Define the Doctor model
model Doctor {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  specialization String
  department     Department      @relation(fields: [departmentId], references: [id])
  departmentId   Int
  workDate       DateTime
  startTime      DateTime
  endTime        DateTime
  Appointment    Appointment[]
  MedicalRecord  MedicalRecord[]
  Surgery        Surgery[]
}

// Define the Nurse model
model Nurse {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int
  department    Department      @relation(fields: [departmentId], references: [id])
  departmentId  Int
  workDate      DateTime
  startTime     DateTime
  endTime       DateTime
  MedicalRecord MedicalRecord[]
}

// Define the Patient model
model Patient {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  address        String
  isResident     Boolean
  room           Room?            @relation(fields: [roomId], references: [id])
  roomId         Int?
  bed            Bed?             @relation(fields: [bedId], references: [id])
  bedId          Int?
  Appointment    Appointment[]
  MedicalRecord  MedicalRecord[]
  Invoice        Invoice[]
  LabTest        LabTest[]
  Surgery        Surgery[]
  EmergencyVisit EmergencyVisit[]
}

// Define the Employee model
model Employee {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  jobTitle     String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  workDate     DateTime
  startTime    DateTime
  endTime      DateTime
}

// Define the Appointment model
model Appointment {
  id                  Int      @id @default(autoincrement())
  patient             Patient  @relation(fields: [patientId], references: [id])
  patientId           Int
  doctor              Doctor   @relation(fields: [doctorId], references: [id])
  doctorId            Int
  presenceDateTime    DateTime
  appointmentDateTime DateTime
  appointmentType     AppointmentType
  notes               String?
}

// Define the MedicalRecord model
model MedicalRecord {
  id             Int      @id @default(autoincrement())
  patient        Patient  @relation(fields: [patientId], references: [id])
  patientId      Int
  doctor         Doctor   @relation(fields: [doctorId], references: [id])
  doctorId       Int
  nurse          Nurse    @relation(fields: [nurseId], references: [id])
  nurseId        Int
  recordDateTime DateTime
  source         String
  diagnosis      String
  treatment      String
  prescription   String
}

// Define the Department model
model Department {
  id       Int        @id @default(autoincrement())
  name     String
  image    String
  Doctor   Doctor[]
  Nurse    Nurse[]
  Employee Employee[]
}

// Define the Room model
model Room {
  id         Int       @id @default(autoincrement())
  roomNumber String
  capacity   Int
  Patient    Patient[]
  Bed        Bed[]
}

// Define the Bed model
model Bed {
  id         Int       @id @default(autoincrement())
  room       Room      @relation(fields: [roomId], references: [id])
  roomId     Int
  bedNumber  Int
  bedStatus BedStatus
  Patient    Patient[]
}

// Define the InventoryItem model
model InventoryItem {
  id             Int      @id @default(autoincrement())
  itemName       String
  quantity       Int
  expirationDate DateTime
  supplier       Supplier @relation(fields: [supplierId], references: [id])
  supplierId     Int
}

// Define the Supplier model
model Supplier {
  id            Int             @id @default(autoincrement())
  supplierName  String
  contactNumber String
  address       String
  InventoryItem InventoryItem[]
}

// Define the Invoice model
model Invoice {
  id               Int       @id @default(autoincrement())
  patient          Patient   @relation(fields: [patientId], references: [id])
  patientId        Int
  totalAmount      Float
  paymentStatus    PaymentStatus
  insuranceDetails String?
  billingDate      DateTime
  Payment          Payment[]
}

// Define the Payment model
model Payment {
  id            Int      @id @default(autoincrement())
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId     Int
  paymentAmount Float
  paymentDate   DateTime
}

// Define the LabTest model
model LabTest {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  testType  TestType
  testDate  DateTime
  result    String
}

// Define the Surgery model
model Surgery {
  id            Int      @id @default(autoincrement())
  patient       Patient  @relation(fields: [patientId], references: [id])
  patientId     Int
  surgeon       Doctor   @relation(fields: [surgeonId], references: [id])
  surgeonId     Int
  operatingRoom String
  surgeryDate   DateTime
  surgeryTime   DateTime
  surgeryType   SurgeryType
  notes String?
}

// Define the EmergencyVisit model
model EmergencyVisit {
  id            Int      @id @default(autoincrement())
  patient       Patient  @relation(fields: [patientId], references: [id])
  patientId     Int
  arrivalTime   DateTime
  priorityLevel PriorityLevel
  treatment     String
  disposition   Disposition
}

// Define the Logs model
model Logs {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  logDateTime DateTime
  logType     LogType
  logMessage  String
}

// Define the ForumPosts model
model ForumPosts {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  postDateTime DateTime
  postCategory ForumPostCategory
  title        String
  content      String
  aiAnswer     String
  createdAt    DateTime
  updatedAt    DateTime
  deleted      Boolean        @default(false)
  ForumReplies ForumReplies[]
}

// Define the ForumReplies model
model ForumReplies {
  id            Int        @id @default(autoincrement())
  post          ForumPosts @relation(fields: [postId], references: [id])
  postId        Int
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  replyDateTime DateTime
  content       String
}

// Define the ChatRoom model
model ChatRoom {
  id              Int           @id @default(autoincrement())
  roomName        String
  createdDateTime DateTime
  ChatMessage     ChatMessage[]
}

// Define the ChatMessage model
model ChatMessage {
  id              Int      @id @default(autoincrement())
  room            ChatRoom @relation(fields: [roomId], references: [id])
  roomId          Int
  sender          User     @relation(fields: [senderId], references: [id])
  senderId        Int
  content         String
  messageDateTime DateTime
}
